---NSE_BUFFER_RATIO


SELECT 'ENV' ENV ,CURRENT_TIMESTAMP SNAPSHOT_ON, 
        W.HOST,
        TO_DECIMAL(W.WARM_GB, 10, 2) WARM_GB,
        TO_DECIMAL(B.BUFFER_GB, 10, 2) BUFFER_GB,
        TO_VARCHAR(TO_DECIMAL(W.WARM_GB / B.BUFFER_GB, 10, 2)) NSE_BUFFER_RATIO
      FROM
      ( SELECT HOST, SUM(MAIN_PHYSICAL_SIZE_IN_PAGE_LOADABLE) / 1024 / 1024 / 1024 WARM_GB FROM ( SELECT
    *
  FROM
    M_CS_COLUMNS_PERSISTENCE
) TEMP_M_CS_COLUMNS_PERSISTENCE GROUP BY HOST ) W,
      ( SELECT HOST, MAX(MAX_SIZE) / 1024 / 1024 / 1024 BUFFER_GB FROM M_BUFFER_CACHE_STATISTICS GROUP BY HOST HAVING MAX(MAX_SIZE) > 0 ) B
      WHERE
        B.HOST = W.HOST;


select HOST,PORT,SCHEMA_NAME,TABLE_NAME,COLUMN_NAME,PART_ID,LOAD_UNIT,GRANULARITY,(MEMORY_SIZE_IN_MAIN/(1024*3)) MEMORY_SIZE_IN_MAIN,
(MAIN_PHYSICAL_SIZE/(1024*3)) MAIN_PHYSICAL_SIZE
 FROM M_CS_NSE_ADVISOR R
 order by TABLE_NAME,GRANULARITY;

ALTER TABLE TABLE_NAME PAGE LOADABLE CASCADE;



	WITH TAB as
	(
	select DISTINCT SCHEMA_NAME,TABLE_NAME,LOAD_UNIT from M_CS_TABLES
	
	)
	SELECT COUNT(*) TOTAL_TABLES,
	 sum( case when LOAD_UNIT='PAGE' then 1 else 0 end) TABLES_IN_NSE,
	  sum( case when LOAD_UNIT='COLUMN' then 1 else 0 end) TABLES_NOT_IN_NSE,
	    sum( case when LOAD_UNIT is null  then 1 else 0 end) TABLES_NOT_SURE_WHERE
	  FROM TAB;



SELECT  CURRENT_TIMESTAMP SNAPSHOT_ON, 
        W.HOST,
        TO_DECIMAL(W.WARM_GB, 10, 2) WARM_GB,
        TO_DECIMAL(B.BUFFER_GB, 10, 2) BUFFER_GB,
        TO_VARCHAR(TO_DECIMAL(W.WARM_GB / B.BUFFER_GB, 10, 2)) NSE_BUFFER_RATIO
      FROM
      ( SELECT HOST, SUM(MAIN_PHYSICAL_SIZE_IN_PAGE_LOADABLE) / 1024 / 1024 / 1024 WARM_GB FROM ( SELECT
    *
  FROM
    M_CS_COLUMNS_PERSISTENCE
) TEMP_M_CS_COLUMNS_PERSISTENCE GROUP BY HOST ) W,
      ( SELECT HOST, MAX(MAX_SIZE) / 1024 / 1024 / 1024 BUFFER_GB FROM M_BUFFER_CACHE_STATISTICS GROUP BY HOST HAVING MAX(MAX_SIZE) > 0 ) B
      WHERE
        B.HOST = W.HOST



-----CREATE TABLE

DROP TABLE M_CS_NSE_ADVISOR_MH;
CREATE TABLE M_CS_NSE_ADVISOR_MH
AS
(
SELECT
current_timestamp AS date,
C.layer AS cold_configuration_layer,
C.value AS cold_configuration_value,
H.layer AS hot_configuration_layer,
H.value AS hot_configuration_value,
CASE r.granularity
WHEN 'TABLE' THEN 'ALTER TABLE "' || r.schema_name || '"."' || r.table_name || '" '|| r.load_unit || ' LOADABLE CASCADE'
WHEN 'PARTITION' THEN 'ALTER TABLE "' || r.schema_name || '"."' || r.table_name || '" ALTER PARTITION ' || r.part_id || ' ' || r.load_unit || ' LOADABLE'
WHEN 'COLUMN' THEN 'ALTER TABLE "' || r.schema_name || '"."' || r.table_name || '" ALTER ("' || r.column_name || '" ALTER ' || r.load_unit || ' LOADABLE)'
END AS statement,
R.*
FROM (select HOST,PORT,SCHEMA_NAME,TABLE_NAME,COLUMN_NAME,PART_ID,LOAD_UNIT,GRANULARITY,
round((MEMORY_SIZE_IN_MAIN/1024/1024/1024),2) MEMORY_SIZE_IN_MAIN,
round((MAIN_PHYSICAL_SIZE/1024/1024/1024),2) MAIN_PHYSICAL_SIZE
 FROM M_CS_NSE_ADVISOR) R
LEFT OUTER JOIN (SELECT host, port, layer_name AS layer,
value
FROM "PUBLIC"."M_CONFIGURATION_PARAMETER_VALUES"
WHERE file_name = 'indexserver.ini'
AND section = 'cs_nse_advisor'
AND key = 'cold_object_threshold_rel') C ON R.host = C.host
and R.port = C.port
LEFT OUTER JOIN (SELECT host, port, layer_name AS layer,
value
FROM "PUBLIC"."M_CONFIGURATION_PARAMETER_VALUES"
WHERE file_name = 'indexserver.ini' AND
section = 'cs_nse_advisor' AND
key = 'hot_object_threshold_rel') H
ON R.host = H.host and R.port = H.port
-- filter for valid combinations
WHERE NOT(granularity = 'COLUMN' AND column_name like '$%$' ));
SELECT COLD_CONFIGURATION_LAYER,COLD_CONFIGURATION_VALUE,HOT_CONFIGURATION_LAYER,HOT_CONFIGURATION_VALUE,STATEMENT,HOST,PORT,SCHEMA_NAME,TABLE_NAME,COLUMN_NAME,PART_ID,LOAD_UNIT,GRANULARITY,MEMORY_SIZE_IN_MAIN,MAIN_PHYSICAL_SIZE
 from M_CS_NSE_ADVISOR_MH 
 ORDER BY TABLE_NAME
where GRANULARITY='TABLE';
