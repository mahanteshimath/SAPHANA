SELECT
/* 

[NAME]

- HANA_Tables_TemporaryTables_1.00.100+

[DESCRIPTION]

- Temporary table overview

[SOURCE]

- SAP Note 1969700

[DETAILS AND RESTRICTIONS]

- Columns CONNECTION_ID, STATEMENT_ID, RECORD_COUNT, TABLE_SIZE available as of SAP HANA 1.00.100
- RECORD_COUNT and TABLE_SIZE contain session specific values
- See SAP Note 2800007 for more information related to temporary tables.

[VALID FOR]

- Revisions:              >= 1.00.100

[SQL COMMAND VERSION]

- 2015/05/11:  1.0 (initial version)
- 2015/12/20:  1.1 (dedicated 1.00.100+ version)
- 2018/05/15:  1.2 (TABLE_PREFIX and ORDER_BY included)
- 2018/12/18:  1.3 (TEMPORARY_TABLE_TYPE and IS_COLUMN_TABLE added)
- 2019/09/14:  1.4 (TABLE_PREFIX replaced by TABLE_CLASS)
- 2022/08/04:  1.5 (VCH AFL tables added)
- 2022/11/30:  1.6 (MIN_RECORD_COUNT filter included)

[INVOLVED TABLES]

- M_TEMPORARY_TABLES
- M_TEMPORARY_TABLE_COLUMNS

[INPUT PARAMETERS]

- HOST

  Host name

  'saphana01'     --> Specific host saphana01
  'saphana%'      --> All hosts starting with saphana
  '%'             --> All hosts

- PORT

  Port number

  '30007'         --> Port 30007
  '%03'           --> All ports ending with '03'
  '%'             --> No restriction to ports

- SCHEMA_NAME

  Schema name or pattern

  'SAPSR3'        --> Specific schema SAPSR3
  'SAP%'          --> All schemata starting with 'SAP'
  '%'             --> All schemata

- TABLE_NAME           

  Table name or pattern

  'T000'          --> Specific table T000
  'T%'            --> All tables starting with 'T'
  '%'             --> All tables

- TABLE_CLASS

  Table class

  'ABAP FDA ITAB' --> Display tables related to FDA itabs
  '%'             --> No restriction related to table class

- TEMPORARY_TABLE_TYPE

  Temporary table type (e.g. LOCAL, GLOBAL, NO LOGGING, VOLATILE for temp indexes)

  'LOCAL'         --> Restrict results to LOCAL temporary tables
  '%'             --> No restriction related to temporary table type

- IS_COLUMN_TABLE

  'TRUE'          --> Restrict result to column store tables
  'FALSE'         --> Restrict result to non-column store tables (e.g. row store)
  '%'             --> No restriction to column store tables

- CONN_ID

  Connection ID

  330655          --> Connection ID 330655
  -1              --> No connection ID restriction

- STATEMENT_ID

  Statement ID

  189341246750129 --> Statement ID 1893412467501298
  -1              --> No restriction related to statement ID

- MIN_RECORD_COUNT

  Minimum record count (may sometimes be 0 even if table contains records)

  1000000         --> Only report temporary tables with at least 1 million records
  -1              --> No restriction related to minimum record count

- AGGREGATE_BY

  Aggregation criteria (possible values can be found in comment)

  'COLUMN'        --> Aggregation by column
  'HOST, PORT'    --> Aggregation by host and port
  'NONE'          --> No aggregation

- ORDER_BY

  Sort criteria (available values are provided in comment)

  'SIZE'          --> Sorting by size 
  'TABLE'         --> Sorting by table name

[OUTPUT PARAMETERS]

- HOST:         Host name
- PORT:         Port
- SCHEMA_NAME:  Schema name
- TABLE_NAME:   Table name
- TABLE_CLASS:  Table class
- TYPE:         Temporary table type
- C:            'X' if column store table, otherwise ' '
- NUM_TABLES:   Number of tables
- PERCENT:      Percentage of tables
- COLUMNS:      Column list
- CONN_ID:      Connection ID
- STATEMENT_ID: Statement ID

[EXAMPLE OUTPUT]

-------------------------------------------------------------------------------------------------------------------------------------------------------------
|HOST|PORT|SCHEMA_NAME|TABLE_NAME                                |TABLE_PREFIX|TYPE      |C|NUM_TABLES|PERCENT|RECORDS|SIZE_MB|CONN_ID |STATEMENT_ID|COLUMNS|
-------------------------------------------------------------------------------------------------------------------------------------------------------------
|    |    |SAPC11     |#_SYS_QO_TMP_7f51f10cb000:40180000000744bd|#_SYS_QO_TMP|VOLATILE  |X|         1|   0.00|       |       |       0|            |       |
|    |    |SAPC11     |#_SYS_QO_COL_7f4813720280:40180000000b4423|#_SYS_QO_COL|VOLATILE  |X|         1|   0.00|       |       |       0|            |       |
|    |    |SAPC11     |#_SYS_QO_COL_7f43308727b0:401800000006695e|#_SYS_QO_COL|VOLATILE  |X|         1|   0.00|       |       |       0|            |       |
|    |    |SAPC11     |#_SYS_QO_COL_7f1789d89ee0:401800000015c291|#_SYS_QO_COL|VOLATILE  |X|         1|   0.00|       |       |       0|            |       |
|    |    |SAPC11     |0f2312632bc1a3b109f5e0a86339670664424aa0  |            |NO LOGGING|X|         1|   0.00|       |       |       0|            |       |
|    |    |SAPC11     |e505209baca6990dc85167d82748b815de7d9e2c  |            |NO LOGGING|X|         1|   0.00|       |       |       0|            |       |
|    |    |SAPC11     |#_SYS_QO_TMP_7f51f10cb000:40180000000744b5|#_SYS_QO_TMP|VOLATILE  |X|         1|   0.00|       |       |       0|            |       |
|    |    |SAPC11     |$BPC$TMPCEDD5F1768651ED980CFF1222081C9D0  |            |NO LOGGING|X|         1|   0.00|       |       |       0|            |       |
|    |    |SAPC11     |#_SYS_QO_COL_7f5abc0fc280:40180000000b441a|#_SYS_QO_COL|VOLATILE  |X|         1|   0.00|       |       |       0|            |       |
|    |    |SAPC11     |#_SYS_QO_COL_7f5aef7c6bf0:4030000000002be0|#_SYS_QO_COL|VOLATILE  |X|         1|   0.00|       |       |       0|            |       |
-------------------------------------------------------------------------------------------------------------------------------------------------------------

*/

  HOST,
  PORT,
  SCHEMA_NAME,
  TABLE_NAME,
  TABLE_CLASS,
  TEMPORARY_TABLE_TYPE TYPE,
  MAP(IS_COLUMN_TABLE, 'TRUE', 'X', 'FALSE', ' ', 'any') C,
  LPAD(NUM_TABLES, 10) NUM_TABLES,
  LPAD(TO_DECIMAL(NUM_TABLES / SUM(NUM_TABLES) OVER () * 100, 10, 2), 7) PERCENT,
  IFNULL(LPAD(RECORDS, 10), '') RECORDS,
  IFNULL(LPAD(TO_DECIMAL(SIZE_BYTE / 1024 / 1024, 10, 2), 9), '') SIZE_MB,
  LPAD(CONN_ID, 8) CONN_ID,
  IFNULL(LPAD(STATEMENT_ID, 17), '') STATEMENT_ID,
  IFNULL(COLUMNS, '') COLUMNS
FROM
( SELECT
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')         != 0 THEN IFNULL(T.HOST, '')             ELSE MAP(BI.HOST, '%', 'any', BI.HOST)                                 END HOST,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PORT')         != 0 THEN IFNULL(TO_VARCHAR(T.PORT), '') ELSE MAP(BI.PORT, '%', 'any', BI.PORT)                                 END PORT,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'SCHEMA')       != 0 THEN T.SCHEMA_NAME                  ELSE MAP(BI.SCHEMA_NAME, '%', 'any', BI.SCHEMA_NAME)                   END SCHEMA_NAME,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TABLE')        != 0 THEN T.TABLE_NAME                   ELSE MAP(BI.TABLE_NAME, '%', 'any', BI.TABLE_NAME)                     END TABLE_NAME,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CLASS')        != 0 THEN T.TABLE_CLASS                  ELSE MAP(BI.TABLE_CLASS, '%', 'any', BI.TABLE_CLASS)                   END TABLE_CLASS,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'COLUMN')       != 0 THEN TC.COLUMNS                     ELSE 'any'                                                             END COLUMNS,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CONN_ID')      != 0 THEN TO_VARCHAR(T.CONNECTION_ID)    ELSE MAP(BI.CONN_ID, -1, 'any', TO_VARCHAR(BI.CONN_ID))                END CONN_ID,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'STATEMENT_ID') != 0 THEN TO_VARCHAR(T.STATEMENT_ID)     ELSE MAP(BI.STATEMENT_ID, -1, 'any', TO_VARCHAR(BI.STATEMENT_ID))      END STATEMENT_ID,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TYPE')         != 0 THEN T.TEMPORARY_TABLE_TYPE         ELSE MAP(BI.TEMPORARY_TABLE_TYPE, '%', 'any', BI.TEMPORARY_TABLE_TYPE) END TEMPORARY_TABLE_TYPE,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'IS_COLTAB')    != 0 THEN T.IS_COLUMN_TABLE              ELSE MAP(BI.IS_COLUMN_TABLE, '%', 'any', BI.IS_COLUMN_TABLE)           END IS_COLUMN_TABLE,
    COUNT(*) NUM_TABLES,
    SUM(TO_DECIMAL(T.RECORD_COUNT)) RECORDS,
    SUM(TO_DECIMAL(T.TABLE_SIZE)) SIZE_BYTE,
    BI.ORDER_BY
  FROM
  ( SELECT                 /* Modification section */
      '%' HOST,
      '%' PORT,
      '%' SCHEMA_NAME,
      '%' TABLE_NAME,
      '%' TABLE_CLASS,
      '%' TEMPORARY_TABLE_TYPE,
      '%' IS_COLUMN_TABLE,
      -1 CONN_ID,
      -1 STATEMENT_ID,
      -1 MIN_RECORD_COUNT,
      'CLASS, TYPE, IS_COLTAB' AGGREGATE_BY,                /* HOST, PORT, SCHEMA, TABLE, CLASS, TYPE, IS_COLTAB, COLUMN, CONN_ID, STATEMENT_ID or comma separated combinations, NONE for no aggregation */
      'SIZE' ORDER_BY                    /* TABLE, CLASS, COUNT, RECORDS, SIZE */
    FROM
      DUMMY
  ) BI,
  ( SELECT
      T.*,
      CASE
        WHEN T.TABLE_NAME LIKE '_SYS_CE_MDS_QE_INLIST%'                       THEN 'MDS'
        WHEN T.TABLE_NAME LIKE '_SYS_CE_%QO_CONTAINER%'                       THEN 'Calculation engine (qo)'
        WHEN T.TABLE_NAME LIKE '#_SYS_QO_COL%'                                THEN 'Query optimizer (COL)'
        WHEN T.TABLE_NAME LIKE '#_SYS_QO_FDA%'                                THEN 'Query optimizer (FDA)'
        WHEN T.TABLE_NAME LIKE '#_SYS_QO_ROW%'                                THEN 'Query optimizer (ROW)'
        WHEN T.TABLE_NAME LIKE '#_SYS_QO_TMP%'                                THEN 'Query optimizer (TMP)'
        WHEN T.TABLE_NAME LIKE '$BPC$TMP%'                                    THEN 'BPC (TMP)'
        WHEN T.TABLE_NAME LIKE '$BPC$HC%'                                     THEN 'BPC (HC)'
        WHEN T.TABLE_NAME LIKE 'ND%CE%'                                       THEN 'BPC NW'
        WHEN T.TABLE_NAME LIKE 'T_BPC_ALLOC_VIEW_WHERE_TMP%'                  THEN 'BPC NW (allocation view)'
        WHEN T.TABLE_NAME LIKE 'T_MAPPING_JOIN%'                              THEN 'BPC NW (mapping join)'
        WHEN T.TABLE_NAME LIKE 'T%SEQ%'                                       THEN 'BPC NW (sequence)'
        WHEN T.TABLE_NAME LIKE 'T_WHERE_NEW%'                                 THEN 'BPC NW (where)'
        WHEN T.TABLE_NAME LIKE '_SYS_PARAM_ITAB_%'                            THEN 'ABAP (FDA)'
        WHEN T.TABLE_NAME LIKE '_SYS_PLE:%'                                   THEN 'Planning engine'
        WHEN T.TABLE_NAME LIKE '_SYS_SS2_TMP_TABLE%'                          THEN 'SQLScript (intermediate tables)'
        WHEN T.TABLE_NAME LIKE '_SQLSC_TRANSFER_TABLE%'                       THEN 'SQLScript (transfer table)'
        WHEN T.TABLE_NAME LIKE '0BW:BIA%BI0_0Q%'                              THEN 'BW (0Q, planning / F4)'
        WHEN T.TABLE_NAME LIKE '0BW:BIA%BI0_08%'                              THEN 'BW (08, hierarchies)'
        WHEN T.TABLE_NAME LIKE '0BW:BIA%'                                     THEN 'BW (other temporary data)'
        WHEN T.TABLE_NAME LIKE '0BW:CRM%'                                     THEN 'BW (CRM segmentation)'
        WHEN T.TABLE_NAME LIKE '%.%.%' AND LENGTH(SUBSTR(T.TABLE_NAME, LOCATE(T.TABLE_NAME, '.', 1, 2) + 1)) = 32 THEN 'BW (TREX_EXT_AGGREGATE)'
        WHEN T.TABLE_NAME LIKE '%#tft#%'                                      THEN 'S/4 (table function)'
        WHEN T.TABLE_NAME = LOWER(T.TABLE_NAME) AND LENGTH(T.TABLE_NAME) = 40 THEN 'BW (hash table)'
        WHEN T.TABLE_NAME LIKE 'MSG_OUT_NUMBERED%'                            THEN 'UDF'
        WHEN T.TABLE_NAME LIKE 'RSADSO_LOG_%'                                 THEN 'BW (DSO activation)'
        WHEN T.TABLE_NAME LIKE 'RSODSO_DATAPAK_%'                             THEN 'BW (DSO activation)'
        WHEN T.TABLE_NAME LIKE 'U____________'                                THEN 'BusinessObjects (Financial Consolidation)'
        WHEN T.TABLE_NAME LIKE '%#_________________________________' ESCAPE '#' THEN 'VCH AFL'
        ELSE                                                                       'OTHER'
      END TABLE_CLASS
    FROM
      M_TEMPORARY_TABLES T
  ) T LEFT OUTER JOIN
  ( SELECT
      HOST,
      TO_VARCHAR(PORT) PORT,
      SCHEMA_NAME,
      TABLE_NAME,
      STRING_AGG(COLUMN_NAME, ', ') COLUMNS
    FROM
      M_TEMPORARY_TABLE_COLUMNS
    GROUP BY
      HOST,
      TO_VARCHAR(PORT),
      SCHEMA_NAME,
      TABLE_NAME
  ) TC ON
      TC.HOST = T.HOST AND
      TC.PORT = T.PORT AND
      TC.SCHEMA_NAME = T.SCHEMA_NAME AND
      TC.TABLE_NAME = T.TABLE_NAME
  WHERE
    IFNULL(T.HOST, '') LIKE BI.HOST AND
    TO_VARCHAR(IFNULL(T.PORT, '')) LIKE BI.PORT AND
    T.SCHEMA_NAME LIKE BI.SCHEMA_NAME AND
    T.TABLE_NAME LIKE BI.TABLE_NAME AND
    T.TABLE_CLASS LIKE BI.TABLE_CLASS AND
    T.TEMPORARY_TABLE_TYPE LIKE BI.TEMPORARY_TABLE_TYPE AND
    ( BI.CONN_ID = -1 OR T.CONNECTION_ID = BI.CONN_ID ) AND
    ( BI.STATEMENT_ID = -1 OR T.STATEMENT_ID = BI.STATEMENT_ID ) AND
    ( BI.MIN_RECORD_COUNT = -1 OR T.RECORD_COUNT >= BI.MIN_RECORD_COUNT ) AND
    T.IS_COLUMN_TABLE LIKE BI.IS_COLUMN_TABLE
  GROUP BY
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')         != 0 THEN IFNULL(T.HOST, '')             ELSE MAP(BI.HOST, '%', 'any', BI.HOST)                                 END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PORT')         != 0 THEN IFNULL(TO_VARCHAR(T.PORT), '') ELSE MAP(BI.PORT, '%', 'any', BI.PORT)                                 END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'SCHEMA')       != 0 THEN T.SCHEMA_NAME                  ELSE MAP(BI.SCHEMA_NAME, '%', 'any', BI.SCHEMA_NAME)                   END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TABLE')        != 0 THEN T .TABLE_NAME                  ELSE MAP(BI.TABLE_NAME, '%', 'any', BI.TABLE_NAME)                     END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CLASS')        != 0 THEN T.TABLE_CLASS                  ELSE MAP(BI.TABLE_CLASS, '%', 'any', BI.TABLE_CLASS)                   END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'COLUMN')       != 0 THEN TC.COLUMNS                     ELSE 'any'                                                             END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CONN_ID')      != 0 THEN TO_VARCHAR(T.CONNECTION_ID)    ELSE MAP(BI.CONN_ID, -1, 'any', TO_VARCHAR(BI.CONN_ID))                END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'STATEMENT_ID') != 0 THEN TO_VARCHAR(T.STATEMENT_ID)     ELSE MAP(BI.STATEMENT_ID, -1, 'any', TO_VARCHAR(BI.STATEMENT_ID))      END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TYPE')         != 0 THEN T.TEMPORARY_TABLE_TYPE         ELSE MAP(BI.TEMPORARY_TABLE_TYPE, '%', 'any', BI.TEMPORARY_TABLE_TYPE) END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'IS_COLTAB')    != 0 THEN T.IS_COLUMN_TABLE              ELSE MAP(BI.IS_COLUMN_TABLE, '%', 'any', BI.IS_COLUMN_TABLE)           END,
    BI.ORDER_BY
)
ORDER BY
  MAP(ORDER_BY, 'TABLE', SCHEMA_NAME || TABLE_NAME, 'CLASS', TABLE_CLASS),
  MAP(ORDER_BY, 'COUNT', NUM_TABLES, 'RECORDS', RECORDS, 'SIZE', SIZE_BYTE) DESC