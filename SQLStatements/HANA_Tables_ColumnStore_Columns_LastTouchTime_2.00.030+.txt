SELECT
/* 

[NAME]

- HANA_Tables_ColumnStore_Columns_LastTouchTime_2.00.030+

[DESCRIPTION]

- Information when columns were touched (i.e. selected, accessed or modified) the last time

[SOURCE]

- SAP Note 1969700

[DETAILS AND RESTRICTIONS]

- M_TABLE_STATISTICS only available as of Rev. 1.00.100
- M_CS_ALL_COLUMN_STATISTICS available with SAP HANA >= 2.00.030
- LAST_ACCESS_TIME is normally updated whenever the column is selected or modified or used for filtering, but
  there can be exceptions, e.g.:

  - Columns with only a single value (column can be bypassed with single value cache)
  - SAP HANA 1.0: All data in delta storage
  - Implicit column accesses when calling monitoring views like M_CS_COLUMNS / M_CS_ALL_COLUMNS 

- Following parameter needs to be set to populate the SELECT related information (attention: risk of overhead):

  indexserver.ini -> [sql] -> table_statistics_select_enabled = true

[VALID FOR]

- Revisions:              >= 2.00.030

[SQL COMMAND VERSION]

- 2015/04/21:  1.0 (initial version)
- 2016/08/29:  1.1 (OBJECT_LEVEL and PART_ID included)
- 2016/12/31:  1.2 (TIME_AGGREGATE_BY = 'TS<seconds>' included)
- 2017/10/26:  1.3 (TIMEZONE included)
- 2018/12/04:  1.4 (shortcuts for BEGIN_TIME and END_TIME like 'C', 'E-S900' or 'MAX')
- 2019/04/03:  1.5 (extension from LastAccessTime to LastTouchTime)
- 2019/04/03:  1.6 (dedicated 2.00.030+ version including PERSISTENT_MEMORY)
- 2019/11/20:  1.7 (SCHEMA_NAME included)
- 2019/12/11:  1.8 (ORDER_BY included)

[INVOLVED TABLES]

- M_CS_ALL_COLUMNS
- M_TABLE_STATISTICS

[INPUT PARAMETERS]

- BEGIN_TIME

  Begin time

  '2018/12/05 14:05:00' --> Set begin time to 5th of December 2018, 14:05
  'C'                   --> Set begin time to current time
  'C-S900'              --> Set begin time to current time minus 900 seconds
  'C-M15'               --> Set begin time to current time minus 15 minutes
  'C-H5'                --> Set begin time to current time minus 5 hours
  'C-D1'                --> Set begin time to current time minus 1 day
  'C-W4'                --> Set begin time to current time minus 4 weeks
  'E-S900'              --> Set begin time to end time minus 900 seconds
  'E-M15'               --> Set begin time to end time minus 15 minutes
  'E-H5'                --> Set begin time to end time minus 5 hours
  'E-D1'                --> Set begin time to end time minus 1 day
  'E-W4'                --> Set begin time to end time minus 4 weeks
  'MIN'                 --> Set begin time to minimum (1000/01/01 00:00:00)

- END_TIME

  End time

  '2018/12/08 14:05:00' --> Set end time to 8th of December 2018, 14:05
  'C'                   --> Set end time to current time
  'C-S900'              --> Set end time to current time minus 900 seconds
  'C-M15'               --> Set end time to current time minus 15 minutes
  'C-H5'                --> Set end time to current time minus 5 hours
  'C-D1'                --> Set end time to current time minus 1 day
  'C-W4'                --> Set end time to current time minus 4 weeks
  'B+S900'              --> Set end time to begin time plus 900 seconds
  'B+M15'               --> Set end time to begin time plus 15 minutes
  'B+H5'                --> Set end time to begin time plus 5 hours
  'B+D1'                --> Set end time to begin time plus 1 day
  'B+W4'                --> Set end time to begin time plus 4 weeks
  'MAX'                 --> Set end time to maximum (9999/12/31 23:59:59)

- TIMEZONE

  Used timezone (both for input and output parameters)

  'SERVER'       --> Display times in SAP HANA server time
  'UTC'          --> Display times in UTC time

- HOST

  Host name

  'saphana01'     --> Specic host saphana01
  'saphana%'      --> All hosts starting with saphana
  '%'             --> All hosts

- PORT

  Port number

  '30007'         --> Port 30007
  '%03'           --> All ports ending with '03'
  '%'             --> No restriction to ports

- SERVICE_NAME

  Service name

  'indexserver'   --> Specific service indexserver
  '%server'       --> All services ending with 'server'
  '%'             --> All services  

- SCHEMA_NAME

  Schema name or pattern

  'SAPSR3'        --> Specific schema SAPSR3
  'SAP%'          --> All schemata starting with 'SAP'
  '%'             --> All schemata

- TABLE_NAME

  Table name or pattern

  'T000'          --> Specific table T000
  'T%'            --> All tables starting with 'T'
  '%'             --> All tables

- COLUMN_NAME

  Column name

  'MATNR'         --> Column MATNR
  'Z%'            --> Columns starting with "Z"
  '%'             --> No restriction related to columns

- OBJECT_LEVEL

  Controls display of partitions

  'PARTITION'     --> Result is shown on partition level
  'TABLE'         --> Result is shown on table level

- TOUCH_TYPE

  Type of table access

  'ACCESS'        --> Any table access
  'SELECT'        --> SELECT access (only available with table_statistics_select_enabled = true)
  'MODIFY'        --> Modification access (INSERT, UPDATE, DELETE, REPLACE, ...)

- INCLUDE_COLUMNS_NEVER_TOUCHED

  Possibility to include or exclude columns that have an initial touch time

  'X'             --> Show all columns
  ' '             --> Only consider columns with a populated last access time field

- AGGREGATE_BY

  Aggregation criteria (possible values can be found in comment)

  'TIME'          --> Aggregation by time
  'HOST, PORT'    --> Aggregation by host and port
  'NONE'          --> No aggregation

- TIME_AGGREGATE_BY

  Aggregation criteria (possible values can be found in comment)

  'HOUR'          --> Aggregation by hour
  'YYYY/WW'       --> Aggregation by calendar week
  'TS<seconds>'   --> Time slice aggregation based on <seconds> seconds
  'NONE'          --> No aggregation

- ORDER_BY

  Sort criteria (available values are provided in comment)

  'SIZE'          --> Sorting by size 
  'TIME'          --> Sorting by last touch time

[OUTPUT PARAMETERS]

- ACCESS_TIME:      Timestamp of last column access ('never' in case column was not accessed since last SAP HANA startup)
- HOST:             Host name
- PORT:             Port
- SERVICE:          Service name
- SCHEMA_NAME:      Schema name
- TABLE_NAME:       Table name
- COLUMN_NAME:      Column name
- NUM_COLUMNS:      Number of columns accessed
- MEM_GB:           Memory size (GB)
- PERS_MEM_GB:      Persistent memory size (GB)

[EXAMPLE OUTPUT]

------------------------------------------------------------------------
|ACCESS_TIME  |HOST|PORT|TABLE_NAME|COLUMN_NAME|NUM_COLUMNS|MEM_SIZE_GB|
------------------------------------------------------------------------
|2015/04/21 11|any |any |any       |any        |       3106|     112.98|
|2015/04/21 10|any |any |any       |any        |       1845|      13.06|
|2015/04/21 09|any |any |any       |any        |        444|       0.73|
|2015/04/21 08|any |any |any       |any        |        476|       0.84|
|2015/04/21 07|any |any |any       |any        |         25|       3.16|
|2015/04/21 06|any |any |any       |any        |        185|       0.84|
|2015/04/21 05|any |any |any       |any        |        451|       0.34|
|2015/04/21 04|any |any |any       |any        |        127|       0.26|
|2015/04/21 03|any |any |any       |any        |         53|       0.07|
|never        |any |any |any       |any        |     442977|       1.33|
------------------------------------------------------------------------

*/

  TOUCH_TIME,
  TOUCH_TYPE,
  HOST,
  PORT,
  SERVICE_NAME SERVICE,
  SCHEMA_NAME,
  TABLE_NAME,
  COLUMN_NAME,
  LPAD(NUM_COLUMNS, 11) NUM_COLUMNS,
  LPAD(TO_DECIMAL(MEM_SIZE_GB, 10, 2), 11) MEM_GB,
  LPAD(TO_DECIMAL(PERS_MEM_SIZE_GB, 10, 2), 11) PERS_MEM_GB
FROM
( SELECT
    TOUCH_TYPE,
    CASE 
      WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'TIME') != 0 THEN 
        CASE 
          WHEN TIME_AGGREGATE_BY LIKE 'TS%' THEN
            TO_VARCHAR(ADD_SECONDS(TO_TIMESTAMP('2014/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS'), FLOOR(SECONDS_BETWEEN(TO_TIMESTAMP('2014/01/01 00:00:00', 
            'YYYY/MM/DD HH24:MI:SS'), CASE TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(TOUCH_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE TOUCH_TIME END) / SUBSTR(TIME_AGGREGATE_BY, 3)) * SUBSTR(TIME_AGGREGATE_BY, 3)), 'YYYY/MM/DD HH24:MI:SS')
          ELSE MAP(CASE TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(TOUCH_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE TOUCH_TIME END, NULL, 'never', TO_VARCHAR(TOUCH_TIME, TIME_AGGREGATE_BY))
        END
      ELSE 'any' 
    END TOUCH_TIME,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'HOST')    != 0 THEN HOST              ELSE MAP(BI_HOST,         '%', 'any', BI_HOST)         END HOST,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'PORT')    != 0 THEN TO_VARCHAR(PORT)  ELSE MAP(BI_PORT,         '%', 'any', BI_PORT)         END PORT,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'SERVICE') != 0 THEN SERVICE_NAME      ELSE MAP(BI_SERVICE_NAME, '%', 'any', BI_SERVICE_NAME) END SERVICE_NAME,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'SCHEMA')  != 0 THEN SCHEMA_NAME       ELSE MAP(BI_SCHEMA_NAME,  '%', 'any', BI_SCHEMA_NAME)  END SCHEMA_NAME,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'TABLE')   != 0 THEN TABLE_NAME || MAP(OBJECT_LEVEL, 'TABLE', '', CHAR(32) || '(' || PART_ID || ')')
                                                                                                  ELSE MAP(BI_TABLE_NAME,   '%', 'any', BI_TABLE_NAME)   END TABLE_NAME,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'COLUMN')  != 0 THEN COLUMN_NAME       ELSE MAP(BI_COLUMN_NAME,  '%', 'any', BI_COLUMN_NAME)  END COLUMN_NAME,
    COUNT(*) NUM_COLUMNS,
    SUM(MEMORY_SIZE_IN_TOTAL) / 1024 / 1024 / 1024 MEM_SIZE_GB,
    SUM(PERSISTENT_MEMORY_SIZE_IN_TOTAL) / 1024 / 1024 / 1024 PERS_MEM_SIZE_GB,
    ORDER_BY
  FROM
  ( SELECT
      BI.TOUCH_TYPE,
      CASE BI.TOUCH_TYPE
        WHEN 'ACCESS' THEN C.LAST_ACCESS_TIME
        WHEN 'MODIFY' THEN TS.LAST_MODIFY_TIME
        WHEN 'SELECT' THEN TS.LAST_SELECT_TIME
      END TOUCH_TIME,
      C.HOST,
      C.PORT,
      S.SERVICE_NAME,
      C.SCHEMA_NAME,
      C.TABLE_NAME,
      C.PART_ID,
      C.COLUMN_NAME,
      C.MEMORY_SIZE_IN_TOTAL,
      C.PERSISTENT_MEMORY_SIZE_IN_TOTAL,
      BI.BEGIN_TIME,
      BI.END_TIME,
      BI.TIMEZONE,
      BI.INCLUDE_COLUMNS_NEVER_TOUCHED,
      BI.AGGREGATE_BY,
      BI.TIME_AGGREGATE_BY,
      BI.ORDER_BY,
      BI.OBJECT_LEVEL,
      BI.HOST BI_HOST,
      BI.PORT BI_PORT,
      BI.SERVICE_NAME BI_SERVICE_NAME,
      BI.SCHEMA_NAME BI_SCHEMA_NAME,
      BI.TABLE_NAME BI_TABLE_NAME,
      BI.COLUMN_NAME BI_COLUMN_NAME
    FROM
    ( SELECT
        CASE
          WHEN BEGIN_TIME =    'C'                             THEN CURRENT_TIMESTAMP
          WHEN BEGIN_TIME LIKE 'C-S%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-S'))
          WHEN BEGIN_TIME LIKE 'C-M%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-M') * 60)
          WHEN BEGIN_TIME LIKE 'C-H%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-H') * 3600)
          WHEN BEGIN_TIME LIKE 'C-D%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-D') * 86400)
          WHEN BEGIN_TIME LIKE 'C-W%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-W') * 86400 * 7)
          WHEN BEGIN_TIME LIKE 'E-S%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-S'))
          WHEN BEGIN_TIME LIKE 'E-M%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-M') * 60)
          WHEN BEGIN_TIME LIKE 'E-H%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-H') * 3600)
          WHEN BEGIN_TIME LIKE 'E-D%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-D') * 86400)
          WHEN BEGIN_TIME LIKE 'E-W%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-W') * 86400 * 7)
          WHEN BEGIN_TIME =    'MIN'                           THEN TO_TIMESTAMP('1000/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS')
          WHEN SUBSTR(BEGIN_TIME, 1, 1) NOT IN ('C', 'E', 'M') THEN TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS')
        END BEGIN_TIME,
        CASE
          WHEN END_TIME =    'C'                             THEN CURRENT_TIMESTAMP
          WHEN END_TIME LIKE 'C-S%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-S'))
          WHEN END_TIME LIKE 'C-M%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-M') * 60)
          WHEN END_TIME LIKE 'C-H%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-H') * 3600)
          WHEN END_TIME LIKE 'C-D%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-D') * 86400)
          WHEN END_TIME LIKE 'C-W%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-W') * 86400 * 7)
          WHEN END_TIME LIKE 'B+S%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+S'))
          WHEN END_TIME LIKE 'B+M%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+M') * 60)
          WHEN END_TIME LIKE 'B+H%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+H') * 3600)
          WHEN END_TIME LIKE 'B+D%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+D') * 86400)
          WHEN END_TIME LIKE 'B+W%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+W') * 86400 * 7)
          WHEN END_TIME =    'MAX'                           THEN TO_TIMESTAMP('9999/12/31 00:00:00', 'YYYY/MM/DD HH24:MI:SS')
          WHEN SUBSTR(END_TIME, 1, 1) NOT IN ('C', 'B', 'M') THEN TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS')
        END END_TIME,
        TIMEZONE,
        HOST,
        PORT,
        SERVICE_NAME,
        SCHEMA_NAME,
        TABLE_NAME,
        COLUMN_NAME,
        OBJECT_LEVEL,
        INCLUDE_COLUMNS_NEVER_TOUCHED,
        TOUCH_TYPE,
        AGGREGATE_BY,
        MAP(TIME_AGGREGATE_BY,
          'NONE',        'YYYY/MM/DD HH24:MI:SS:FF7',
          'HOUR',        'YYYY/MM/DD HH24',
          'DAY',         'YYYY/MM/DD (DY)',
          'HOUR_OF_DAY', 'HH24',
          TIME_AGGREGATE_BY ) TIME_AGGREGATE_BY,
        ORDER_BY
      FROM
      ( SELECT                /* Modification section */
          '1000/10/18 07:58:00' BEGIN_TIME,                  /* YYYY/MM/DD HH24:MI:SS timestamp, C, C-S<seconds>, C-M<minutes>, C-H<hours>, C-D<days>, C-W<weeks>, E-S<seconds>, E-M<minutes>, E-H<hours>, E-D<days>, E-W<weeks>, MIN */
          '9999/10/18 08:05:00' END_TIME,                    /* YYYY/MM/DD HH24:MI:SS timestamp, C, C-S<seconds>, C-M<minutes>, C-H<hours>, C-D<days>, C-W<weeks>, B+S<seconds>, B+M<minutes>, B+H<hours>, B+D<days>, B+W<weeks>, MAX */
          'SERVER' TIMEZONE,                              /* SERVER, UTC */
          '%' HOST,
          '%' PORT,
          '%' SERVICE_NAME,
          '%' SCHEMA_NAME,
          '%' TABLE_NAME,
          '%' COLUMN_NAME,
          'TABLE' OBJECT_LEVEL,
          'MODIFY' TOUCH_TYPE,            /* ACCESS, SELECT, MODIFY */
          'X' INCLUDE_COLUMNS_NEVER_TOUCHED,
          'TIME' AGGREGATE_BY,         /* HOST, PORT, SERVICE, SCHEMA, TABLE, COLUMN, TIME or comma separated combinations, NONE for no aggregation */
          'DAY' TIME_AGGREGATE_BY,      /* HOUR, DAY, HOUR_OF_DAY or database time pattern, TS<seconds> for time slice, NONE for no aggregation */
          'TIME' ORDER_BY               /* TIME, SIZE, NAME */
        FROM
          DUMMY
      )
    ) BI,
      M_SERVICES S,
      M_CS_ALL_COLUMNS C,
      M_TABLE_STATISTICS TS
    WHERE
      S.HOST LIKE BI.HOST AND
      TO_VARCHAR(S.PORT) LIKE BI.PORT AND
      S.SERVICE_NAME LIKE BI.SERVICE_NAME AND
      C.HOST = S.HOST AND
      C.PORT = S.PORT AND
      C.SCHEMA_NAME LIKE BI.SCHEMA_NAME AND
      C.TABLE_NAME LIKE BI.TABLE_NAME AND
      C.COLUMN_NAME LIKE BI.COLUMN_NAME AND
      TS.SCHEMA_NAME = C.SCHEMA_NAME AND
      TS.TABLE_NAME = C.TABLE_NAME
  )
  WHERE
    ( CASE TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(TOUCH_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE TOUCH_TIME END BETWEEN BEGIN_TIME AND END_TIME OR
      INCLUDE_COLUMNS_NEVER_TOUCHED = 'X' AND TOUCH_TIME IS NULL
    )
  GROUP BY
    TOUCH_TYPE,
    CASE 
      WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'TIME') != 0 THEN 
        CASE 
          WHEN TIME_AGGREGATE_BY LIKE 'TS%' THEN
            TO_VARCHAR(ADD_SECONDS(TO_TIMESTAMP('2014/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS'), FLOOR(SECONDS_BETWEEN(TO_TIMESTAMP('2014/01/01 00:00:00', 
            'YYYY/MM/DD HH24:MI:SS'), CASE TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(TOUCH_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE TOUCH_TIME END) / SUBSTR(TIME_AGGREGATE_BY, 3)) * SUBSTR(TIME_AGGREGATE_BY, 3)), 'YYYY/MM/DD HH24:MI:SS')
          ELSE MAP(CASE TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(TOUCH_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE TOUCH_TIME END, NULL, 'never', TO_VARCHAR(TOUCH_TIME, TIME_AGGREGATE_BY))
        END
      ELSE 'any' 
    END,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'HOST')    != 0 THEN HOST              ELSE MAP(BI_HOST,         '%', 'any', BI_HOST)         END,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'PORT')    != 0 THEN TO_VARCHAR(PORT)  ELSE MAP(BI_PORT,         '%', 'any', BI_PORT)         END,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'SERVICE') != 0 THEN SERVICE_NAME      ELSE MAP(BI_SERVICE_NAME, '%', 'any', BI_SERVICE_NAME) END,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'SCHEMA')  != 0 THEN SCHEMA_NAME       ELSE MAP(BI_SCHEMA_NAME,  '%', 'any', BI_SCHEMA_NAME)  END,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'TABLE')   != 0 THEN TABLE_NAME || MAP(OBJECT_LEVEL, 'TABLE', '', CHAR(32) || '(' || PART_ID || ')')
                                                                                                  ELSE MAP(BI_TABLE_NAME,   '%', 'any', BI_TABLE_NAME)   END,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'COLUMN')  != 0 THEN COLUMN_NAME       ELSE MAP(BI_COLUMN_NAME,  '%', 'any', BI_COLUMN_NAME)  END,
    ORDER_BY
)
ORDER BY
  MAP(ORDER_BY, 'NAME', SCHEMA_NAME || TABLE_NAME || COLUMN_NAME),
  MAP(ORDER_BY, 'SIZE', MEM_SIZE_GB) DESC,
  MAP(TOUCH_TIME, 'never', '00000000', TOUCH_TIME) DESC
