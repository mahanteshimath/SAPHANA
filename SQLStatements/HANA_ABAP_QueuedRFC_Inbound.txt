SELECT

/* 

[NAME]

- HANA_ABAP_QueuedRFC_Inbound

[DESCRIPTION]

- Overview of inbound queue for queued RFC

[SOURCE]

- SAP Note 1969700

[DETAILS AND RESTRICTIONS]

- Table TRFCQIN only available in SAP ABAP environments
- You have to be connected to the SAP<sid> schema otherwise the following error is issued:

  [259]: invalid table name: Could not find table/view TRFCQIN in schema

- If access to ABAP objects is possible but you cannot log on as ABAP user, you can switch the default schema before executing the command:

  SET SCHEMA SAP<sid>

[VALID FOR]

- Revisions:              all
- Client application:     ABAP

[SQL COMMAND VERSION]

- 2023/02/23:  1.0 (initial version)

[INVOLVED TABLES]

- TRFCQIN

[INPUT PARAMETERS]

- BEGIN_TIME

  Begin time

  '2018/12/05 14:05:00' --> Set begin time to 5th of December 2018, 14:05
  'C'                   --> Set begin time to current time
  'C-S900'              --> Set begin time to current time minus 900 seconds
  'C-M15'               --> Set begin time to current time minus 15 minutes
  'C-H5'                --> Set begin time to current time minus 5 hours
  'C-D1'                --> Set begin time to current time minus 1 day
  'C-W4'                --> Set begin time to current time minus 4 weeks
  'E-S900'              --> Set begin time to end time minus 900 seconds
  'E-M15'               --> Set begin time to end time minus 15 minutes
  'E-H5'                --> Set begin time to end time minus 5 hours
  'E-D1'                --> Set begin time to end time minus 1 day
  'E-W4'                --> Set begin time to end time minus 4 weeks
  'MIN'                 --> Set begin time to minimum (1000/01/01 00:00:00)

- END_TIME

  End time

  '2018/12/08 14:05:00' --> Set end time to 8th of December 2018, 14:05
  'C'                   --> Set end time to current time
  'C-S900'              --> Set end time to current time minus 900 seconds
  'C-M15'               --> Set end time to current time minus 15 minutes
  'C-H5'                --> Set end time to current time minus 5 hours
  'C-D1'                --> Set end time to current time minus 1 day
  'C-W4'                --> Set end time to current time minus 4 weeks
  'B+S900'              --> Set end time to begin time plus 900 seconds
  'B+M15'               --> Set end time to begin time plus 15 minutes
  'B+H5'                --> Set end time to begin time plus 5 hours
  'B+D1'                --> Set end time to begin time plus 1 day
  'B+W4'                --> Set end time to begin time plus 4 weeks
  'MAX'                 --> Set end time to maximum (9999/12/31 23:59:59)

       '%' MANDT,
        '%' DEST,
        'RETRY' QSTATE,
        '%' QRFCUSER,
        '%' QRFCFNAM,
        '%' ERRMESS,

- MANDT

  ABAP client

  '100'           --> Display records for client 100
  '%'             --> No restriction related to ABAP client

- DEST

  qRFC destination

  'abap01_C11_00' --> qRFC destination abap01_C11_00
  '%'             --> No restriction related to qRFC destination

- QSTATE

  qRFC state

  'RETRY'         --> Records with qRFC state RETRY
  '%'             --> No restriction related to qRFC state

- QRFCFNAM

  qRFC function module name

  'SXMS_ASYNC_EXEC' --> qRFC function module name SXMS_ASYNC_EXEC
  '%'               --> No restriction related to qRFC function module name

- QRFCUSER

  qRFC user name

  'BTC_ADMIN'     --> Records related to qRFC user BTC_ADMIN
  '%'             --> No restriction related to qRFC user name

- ERRMESS

  qRFC error message
 
  'Command to tRFC/qRFC: Execute LUW again.' --> Records with message 'Command to tRFC/qRFC: Execute LUW again.'
  '%'                                        --> No restriction related to message
  
- AGGREGATE_BY

  Aggregation criteria (possible values can be found in comment)

  'TIME'         --> Aggregation by time
  'DEST, QSTATE' --> Aggregation by qRFC destination and state
  'NONE'         --> No aggregation

- TIME_AGGREGATE_BY

  Aggregation criteria (possible values can be found in comment)

  'HOUR'          --> Aggregation by hour
  'YYYY/WW'       --> Aggregation by calendar week
  'TS<seconds>'   --> Time slice aggregation based on <seconds> seconds
  'NONE'          --> No aggregation

- ORDER_BY

  Sort criteria (available values are provided in comment)

  'TIME'          --> Sorting by change time
  'COUNT'         --> Sorting by number of work items

[OUTPUT PARAMETERS]

- QRFCTIME:  qRFC time
- CNT:       Number of qRFC records
- DEST:      qRFC destination
- QSTATE:    qRFC state
- QRFCFNAM:  qRFC function module name
- QRFCUSER:  qRFC user name
- ERRMESS:   qRFC error message

[EXAMPLE OUTPUT]

------------------------------------------------------------------------------------------------------------------------------------------------
|QRFCTIME           |CNT    |MANDT|DEST               |QSTATE|QRFCUSER   |QRFCFNAM                    |ERRMESS                                 |
------------------------------------------------------------------------------------------------------------------------------------------------
|2023/02/22 15:28:34|     31|001  |saphananode_C11_00 |RETRY |MASTERD_MIG|/SCWM/STOCK_BY_BATCH_CIF_CHG|Command to tRFC/qRFC: Execute LUW again.|
|2023/02/22 16:39:14|     29|001  |saphananode_C11_00 |RETRY |MASTERD_MIG|/SCWM/STOCK_BY_BATCH_CIF_CHG|Command to tRFC/qRFC: Execute LUW again.|
|2023/02/22 14:51:59|     29|001  |saphananode1_C11_00|RETRY |MASTERD_MIG|/SCWM/STOCK_BY_BATCH_CIF_CHG|Command to tRFC/qRFC: Execute LUW again.|
|2023/02/22 16:38:20|     29|001  |saphananode_C11_00 |RETRY |MASTERD_MIG|/SCWM/STOCK_BY_BATCH_CIF_CHG|Command to tRFC/qRFC: Execute LUW again.|
|2023/02/22 15:29:33|     27|001  |saphananode_C11_00 |RETRY |MASTERD_MIG|/SCWM/STOCK_BY_BATCH_CIF_CHG|Command to tRFC/qRFC: Execute LUW again.|
|2023/02/22 16:45:04|     27|001  |saphananode_C11_00 |RETRY |MASTERD_MIG|/SCWM/STOCK_BY_BATCH_CIF_CHG|Command to tRFC/qRFC: Execute LUW again.|
|2023/02/22 16:41:41|     26|001  |saphananode_C11_00 |RETRY |MASTERD_MIG|/SCWM/STOCK_BY_BATCH_CIF_CHG|Command to tRFC/qRFC: Execute LUW again.|
|2023/02/22 15:29:14|     25|001  |saphananode_C11_00 |RETRY |MASTERD_MIG|/SCWM/STOCK_BY_BATCH_CIF_CHG|Command to tRFC/qRFC: Execute LUW again.|
|2023/02/22 15:30:07|     25|001  |saphananode_C11_00 |RETRY |MASTERD_MIG|/SCWM/STOCK_BY_BATCH_CIF_CHG|Command to tRFC/qRFC: Execute LUW again.|
|2023/02/22 15:28:11|     25|001  |saphananode_C11_00 |RETRY |MASTERD_MIG|/SCWM/STOCK_BY_BATCH_CIF_CHG|Command to tRFC/qRFC: Execute LUW again.|
------------------------------------------------------------------------------------------------------------------------------------------------

*/

  QRFCTIME,
  LPAD(CNT, 7) CNT,
  MANDT,
  DEST,
  QSTATE,
  QRFCFNAM,
  QRFCUSER,
  ERRMESS
FROM
( SELECT
    CASE 
      WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TIME') != 0 THEN 
        CASE 
          WHEN BI.TIME_AGGREGATE_BY LIKE 'TS%' THEN
            TO_VARCHAR(ADD_SECONDS(TO_TIMESTAMP('2014/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS'), FLOOR(SECONDS_BETWEEN(TO_TIMESTAMP('2014/01/01 00:00:00', 
            'YYYY/MM/DD HH24:MI:SS'), Q.QRFC_TIME) / SUBSTR(BI.TIME_AGGREGATE_BY, 3)) * SUBSTR(BI.TIME_AGGREGATE_BY, 3)), 'YYYY/MM/DD HH24:MI:SS')
          ELSE TO_VARCHAR(Q.QRFC_TIME, BI.TIME_AGGREGATE_BY)
        END
      ELSE 'any' 
    END QRFCTIME,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'MANDT')    != 0 THEN Q.MANDT     ELSE MAP(BI.MANDT,    '%', 'any', BI.MANDT)    END MANDT,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'DEST')     != 0 THEN Q.DEST      ELSE MAP(BI.DEST,     '%', 'any', BI.DEST)     END DEST,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'QSTATE')   != 0 THEN Q.QSTATE    ELSE MAP(BI.QSTATE,   '%', 'any', BI.QSTATE)   END QSTATE,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'QRFCUSER') != 0 THEN Q.QRFCUSER  ELSE MAP(BI.QRFCUSER, '%', 'any', BI.QRFCUSER) END QRFCUSER,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'QRFCFNAM') != 0 THEN Q.QRFCFNAM  ELSE MAP(BI.QRFCFNAM, '%', 'any', BI.QRFCFNAM) END QRFCFNAM,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'ERRMESS')  != 0 THEN Q.ERRMESS   ELSE MAP(BI.ERRMESS,  '%', 'any', BI.ERRMESS)  END ERRMESS,
    COUNT(*) CNT,
    BI.ORDER_BY
  FROM
  ( SELECT
      CASE
        WHEN BEGIN_TIME =    'C'                             THEN CURRENT_TIMESTAMP
        WHEN BEGIN_TIME LIKE 'C-S%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-S'))
        WHEN BEGIN_TIME LIKE 'C-M%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-M') * 60)
        WHEN BEGIN_TIME LIKE 'C-H%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-H') * 3600)
        WHEN BEGIN_TIME LIKE 'C-D%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-D') * 86400)
        WHEN BEGIN_TIME LIKE 'C-W%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-W') * 86400 * 7)
        WHEN BEGIN_TIME LIKE 'E-S%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-S'))
        WHEN BEGIN_TIME LIKE 'E-M%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-M') * 60)
        WHEN BEGIN_TIME LIKE 'E-H%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-H') * 3600)
        WHEN BEGIN_TIME LIKE 'E-D%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-D') * 86400)
        WHEN BEGIN_TIME LIKE 'E-W%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-W') * 86400 * 7)
        WHEN BEGIN_TIME =    'MIN'                           THEN TO_TIMESTAMP('1000/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS')
        WHEN SUBSTR(BEGIN_TIME, 1, 1) NOT IN ('C', 'E', 'M') THEN TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS')
      END BEGIN_TIME,
      CASE
        WHEN END_TIME =    'C'                             THEN CURRENT_TIMESTAMP
        WHEN END_TIME LIKE 'C-S%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-S'))
        WHEN END_TIME LIKE 'C-M%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-M') * 60)
        WHEN END_TIME LIKE 'C-H%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-H') * 3600)
        WHEN END_TIME LIKE 'C-D%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-D') * 86400)
        WHEN END_TIME LIKE 'C-W%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-W') * 86400 * 7)
        WHEN END_TIME LIKE 'B+S%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+S'))
        WHEN END_TIME LIKE 'B+M%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+M') * 60)
        WHEN END_TIME LIKE 'B+H%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+H') * 3600)
        WHEN END_TIME LIKE 'B+D%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+D') * 86400)
        WHEN END_TIME LIKE 'B+W%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+W') * 86400 * 7)
        WHEN END_TIME =    'MAX'                           THEN TO_TIMESTAMP('9999/12/31 00:00:00', 'YYYY/MM/DD HH24:MI:SS')
        WHEN SUBSTR(END_TIME, 1, 1) NOT IN ('C', 'B', 'M') THEN TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS')
      END END_TIME,
      MANDT,
      DEST,
      QSTATE,
      QRFCUSER,
      QRFCFNAM,
      ERRMESS,
      AGGREGATE_BY,
      MAP(TIME_AGGREGATE_BY,
        'NONE',        'YYYY/MM/DD HH24:MI:SS',
        'HOUR',        'YYYY/MM/DD HH24',
        'DAY',         'YYYY/MM/DD (DY)',
        'HOUR_OF_DAY', 'HH24',
        TIME_AGGREGATE_BY ) TIME_AGGREGATE_BY,
      ORDER_BY
    FROM
    ( SELECT                  /* Modification section */
        'MIN' BEGIN_TIME,                  /* YYYY/MM/DD HH24:MI:SS timestamp, C, C-S<seconds>, C-M<minutes>, C-H<hours>, C-D<days>, C-W<weeks>, E-S<seconds>, E-M<minutes>, E-H<hours>, E-D<days>, E-W<weeks>, MIN */
        'MAX' END_TIME,                    /* YYYY/MM/DD HH24:MI:SS timestamp, C, C-S<seconds>, C-M<minutes>, C-H<hours>, C-D<days>, C-W<weeks>, B+S<seconds>, B+M<minutes>, B+H<hours>, B+D<days>, B+W<weeks>, MAX */
        '%' MANDT,
        '%' DEST,
        'RETRY' QSTATE,
        '%' QRFCFNAM,
        '%' QRFCUSER,
        '%' ERRMESS,
        'QRFCNAM, QRFCFUSER, ERRMESS' AGGREGATE_BY,           /* TIME, MAND, DEST, QSTATE, QRFCUSER, QRFCFNAM, ERRMESS or comma separated combinations, NONE for no aggregation */
        'NONE' TIME_AGGREGATE_BY,      /* HOUR, DAY, HOUR_OF_DAY or database time pattern, TS<seconds> for time slice, NONE for no aggregation */
        'COUNT' ORDER_BY                /* TIME, COUNT, QRFCNAM */
      FROM
        DUMMY
    )
  ) BI,
  ( SELECT
      TO_TIMESTAMP(QRFCDATUM || QRFCUZEIT, 'YYYYMMDDHH24MISS') QRFC_TIME,
      *
    FROM
      TRFCQIN
  ) Q
  WHERE
    TO_VARCHAR(Q.QRFC_TIME, 'YYYY/MM/DD HH24:MI:SS') BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
    Q.MANDT LIKE BI.MANDT AND
    Q.DEST LIKE BI.DEST AND
    Q.QSTATE LIKE BI.QSTATE AND
    Q.QRFCUSER LIKE BI.QRFCUSER AND
    Q.QRFCFNAM LIKE BI.QRFCFNAM AND
    Q.ERRMESS LIKE BI.ERRMESS
  GROUP BY
    CASE 
      WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TIME') != 0 THEN 
        CASE 
          WHEN BI.TIME_AGGREGATE_BY LIKE 'TS%' THEN
            TO_VARCHAR(ADD_SECONDS(TO_TIMESTAMP('2014/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS'), FLOOR(SECONDS_BETWEEN(TO_TIMESTAMP('2014/01/01 00:00:00', 
            'YYYY/MM/DD HH24:MI:SS'), Q.QRFC_TIME) / SUBSTR(BI.TIME_AGGREGATE_BY, 3)) * SUBSTR(BI.TIME_AGGREGATE_BY, 3)), 'YYYY/MM/DD HH24:MI:SS')
          ELSE TO_VARCHAR(Q.QRFC_TIME, BI.TIME_AGGREGATE_BY)
        END
      ELSE 'any' 
    END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'MANDT')    != 0 THEN Q.MANDT     ELSE MAP(BI.MANDT,    '%', 'any', BI.MANDT)    END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'DEST')     != 0 THEN Q.DEST      ELSE MAP(BI.DEST,     '%', 'any', BI.DEST)     END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'QSTATE')   != 0 THEN Q.QSTATE    ELSE MAP(BI.QSTATE,   '%', 'any', BI.QSTATE)   END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'QRFCUSER') != 0 THEN Q.QRFCUSER  ELSE MAP(BI.QRFCUSER, '%', 'any', BI.QRFCUSER) END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'QRFCFNAM') != 0 THEN Q.QRFCFNAM  ELSE MAP(BI.QRFCFNAM, '%', 'any', BI.QRFCFNAM) END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'ERRMESS')  != 0 THEN Q.ERRMESS   ELSE MAP(BI.ERRMESS,  '%', 'any', BI.ERRMESS)  END,
    BI.ORDER_BY
)
ORDER BY
  MAP(ORDER_BY, 'TIME', QRFCTIME) DESC,
  MAP(ORDER_BY, 'COUNT', CNT) DESC,
  QRFCFNAM
